package config

import (
	"github.com/ethereum/go-ethereum/common"
)

type Config struct {
	Core      CoreConfig
	Api       ApiConfig
	Db        DbConfig
	Contracts ContractConfig
	Prover    ProverConfig
	L1Cient   L1ClientConfig
	L1Sender  L1SenderConfig
	L1Watcher L1WatcherConfig
}

// some config for the core
type CoreConfig struct {
	// block sizes to be generated by server.
	BlockChunkSizes int
	//Time between two miniblocks created
	MiniBlockInternal int
	// maximum amount of miniblock iterations before sealing the block
	MiniBlockInterations int
}

type ApiConfig struct {
	// restful api to interact with zion network
	RestApiPort int
	RestApiUrl  string

	// prover api for prover to get&publish proof job
	ProverApiPort int
	ProverApiUrl  string
}

type DbConfig struct {
	Url string
}

type ContractConfig struct {
	ContractAddr common.Address
}

type ProverConfig struct {
	RequestTimeout int
}

type L1ClientConfig struct {
	ChainId int
	// Address of Cortex node API.
	Web3Url string
}
type L1SenderConfig struct {
	// private key of operator
	OperatorPrivateKey common.Hash
	// address of operator account
	OperatorAddress common.Address
}

type L1WatcherConfig struct {
	// amount of confirmations that priority tx could be process.
	// please set this in production because of block revert in L1.
	ConfirmationsForEvent int

	// how often should we poll the cortex node
	// in milliseconds
	PollInternal int
}
